name: Docker

on:
  schedule:
    - cron: "* */8 * * *"
  workflow_dispatch:
  push:
    branches: [ main ]


env:
  CNB_REGISTRY: "${{ secrets.CNB_REGISTRY }}"
  CNB_NAME_SPACE: "${{ secrets.CNB_NAME_SPACE }}"
  CNB_REGISTRY_USER: "${{ secrets.CNB_REGISTRY_USER }}"
  CNB_REGISTRY_PASSWORD: "${{ secrets.CNB_REGISTRY_PASSWORD }}"

jobs:

  build:
    name: Pull
    runs-on: ubuntu-latest
    steps:
    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    # 增加可用磁盘空间
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:

        root-reserve-mb: 2048
        swap-size-mb: 128
        remove-dotnet: 'true'
        remove-haskell: 'true'
        # 如果空间还是不够用，可以把以下开启，清理出更多空间
        # remove-android: 'true'
        # remove-codeql: 'true'
        build-mount-path: '/var/lib/docker/'

    - name: Restart docker
      run: sudo service docker restart

    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push image CNB
      run: |
        docker login -u $CNB_REGISTRY_USER -p $CNB_REGISTRY_PASSWORD $CNB_REGISTRY
        # 数据预处理,判断镜像是否重名
        declare -A duplicate_images
        declare -A temp_map
        while IFS= read -r line; do
            # 忽略空行与注释
            [[ -z "$line" ]] && continue
            if echo "$line" | grep -q '^\s*#'; then
                continue
            fi
            
            # 获取镜像的完整名称，例如kasmweb/nginx:1.25.3（命名空间/镜像名:版本号）
            image=$(echo "$line" | awk '{print $NF}')
            # 将@sha256:等字符删除
            image="${image%%@*}"
            echo "image $image"
            # 获取镜像名:版本号 例如nginx:1.25.3
            image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
            echo "image_name_tag $image_name_tag"
            # 获取命名空间 例如kasmweb, 这里有种特殊情况 docker.io/nginx，把docker.io当成命名空间，也OK
            name_space=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
            echo "name_space: $name_space"
            # 这里不要是空值影响判断
            name_space="${name_space}_"
            # 获取镜像名例如nginx
            image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
            echo "image_name: $image_name"
            
            # 如果镜像存在于数组中，则添加temp_map
            if [[ -n "${temp_map[$image_name]}" ]]; then
                 # 如果temp_map已经存在镜像名，判断是不是同一命名空间
                 if [[ "${temp_map[$image_name]}" != $name_space  ]]; then
                    echo "duplicate image name: $image_name"
                    duplicate_images[$image_name]="true"
                 fi
            else
                # 存镜像的命名空间
                temp_map[$image_name]=$name_space
            fi       
        done < images.txt
        
        
        while IFS= read -r line || [ -n "$line" ]; do
            # 忽略空行与注释
            [[ -z "$line" ]] && continue
            if echo "$line" | grep -q '^\s*#'; then
                continue
            fi
        
            echo "docker pull $line"
            # 捕获 docker pull 的输出 (包括标准错误流，以防信息输出到 stderr)
            pull_output=$(docker pull $line 2>&1)
            pull_status=$?
            echo "$pull_output" # 打印 pull 的输出供参考

            # 检查 pull 是否失败
            if [ $pull_status -ne 0 ]; then
                echo "Error: Docker pull failed for $line with exit status $pull_status."
                continue # 跳过处理此镜像
            fi

            # 检查 pull 的输出是否表明镜像已是最新
            image_updated=true # 默认假设镜像有更新
            if echo "$pull_output" | grep -q "Status: Image is up to date for"; then
                echo "Image $image is already up to date."
                image_updated=false
            fi

            platform=$(echo "$line" | awk -F'--platform[ =]' '{if (NF>1) print $2}' | awk '{print $1}')
            echo "platform is $platform"
            # 如果存在架构信息 将架构信息拼到镜像名称前面
            if [ -z "$platform" ]; then
                platform_prefix=""
            else
                platform_prefix="${platform//\//_}_"
            fi
            echo "platform_prefix is $platform_prefix"
            # 获取镜像的完整名称，例如kasmweb/nginx:1.25.3（命名空间/镜像名:版本号）
            image=$(echo "$line" | awk '{print $NF}')

            # 获取 镜像名:版本号  例如nginx:1.25.3
            image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
            # 获取命名空间 例如kasmweb  这里有种特殊情况 docker.io/nginx，把docker.io当成命名空间，也OK
            name_space=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
            # 获取镜像名例  例如nginx
            image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')

            # 如果原始镜像是 vaultwarden/server，则将目标镜像名设置为 vaultwarden
            original_image_name_part=$(echo "$image" | awk -F':' '{print $1}') # 获取 vaultwarden/server 部分
            if [[ "$original_image_name_part" == "vaultwarden/server" ]]; then
                image_name="vaultwarden"
                echo "Adjusted image_name for vaultwarden/server to: $image_name"
            fi

            name_space_prefix=""
            # 如果镜像名重名
            if [[ -n "${duplicate_images[$image_name]}" ]]; then
               #如果命名空间非空，将命名空间加到前缀
               if [[ -n "${name_space}" ]]; then
                  name_space_prefix="${name_space}_"
               fi
            fi

            # 将@sha256:等字符删除
            image_name_tag="${image_name_tag%%@*}"
            # 重新组合 image_name_tag，因为 image_name 可能已更改
            image_tag_part=$(echo "$image_name_tag" | awk -F':' '{print $2}')
            if [[ -n "$image_tag_part" ]]; then
                image_name_tag="${image_name}:${image_tag_part}"
            else
                image_name_tag="${image_name}" # 处理没有 tag 的情况，例如 latest (虽然前面处理了，但保险起见)
            fi

            new_image="$CNB_REGISTRY/$CNB_NAME_SPACE/$platform_prefix$name_space_prefix$image_name_tag"
            echo "docker tag $image $new_image"
            docker tag $image $new_image

            echo "docker push $new_image"
            # 捕获 docker push 的输出 (包括标准错误流)
            push_output=$(docker push $new_image 2>&1)
            push_status=$? # 获取 push 命令的退出状态
            echo "$push_output" # 打印 push 的输出供参考

            # 检查 push 是否成功
            if [ $push_status -eq 0 ]; then
                echo "Push successful for $new_image."

                # 检查 push 的输出是否表明有实际层被推送 (包含 "Pushed" 或 "Pushing")
                actual_update_pushed=false
                if echo "$push_output" | grep -q -E "Pushed|Pushing"; then
                    actual_update_pushed=true
                fi

                # 只有当 push 成功 并且 实际有层被推送 并且 BARK_KEY 已设置，则发送通知
                if [ "$actual_update_pushed" = true ] && [ -n "$BARK_KEY" ]; then
                    echo "Sending Bark notification (Image Updated)..."
                    # 获取不包含仓库地址的镜像名称部分
                    short_image_name="$platform_prefix$name_space_prefix$image_name_tag"
                    # 对短镜像名称进行基础 URL 编码 (替换 /)
                    encoded_short_image_name=$(echo "$short_image_name" | sed 's|/|%2F|g')
                    # 将编码后的短镜像名称加入 Bark 通知的标题
                    curl -s -G https://api.day.app/$BARK_KEY/"${encoded_short_image_name}镜像更新成功" > /dev/null
                    echo "Bark notification sent."
                elif [ "$actual_update_pushed" = false ]; then
                     # 如果没有实际层被推送，则跳过通知
                     echo "Skipping Bark notification (No new layers pushed to registry)."
                elif [ -z "$BARK_KEY" ]; then # 处理镜像更新但未设置 BARK_KEY 的情况
                     echo "Warning: BARK_KEY environment variable is not set. Skipping Bark notification."
                fi
            else
                echo "Error: Docker push failed for $new_image with exit status $push_status."
                # 你可以在这里添加错误处理逻辑，例如退出脚本
                # exit 1
            fi

            echo "开始清理磁盘空间"
            echo "=============================================================================="
            df -hT
            echo "=============================================================================="
            docker rmi $image
            docker rmi $new_image
            echo "磁盘空间清理完毕"
            echo "=============================================================================="
            df -hT
            echo "=============================================================================="
        done < images.txt
